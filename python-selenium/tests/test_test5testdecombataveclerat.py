# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestTest5testdecombataveclerat:
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_test5testdecombataveclerat(self):
    self.driver.get("http://localhost:5173/")
    self.driver.set_window_size(1920, 1080)
    self.driver.find_element(By.CSS_SELECTOR, "input").click()
    self.driver.find_element(By.CSS_SELECTOR, "input").send_keys("Mon nom")
    self.driver.find_element(By.CSS_SELECTOR, "select").click()
    dropdown = self.driver.find_element(By.CSS_SELECTOR, "select")
    dropdown.find_element(By.XPATH, "//option[. = 'Warrior']").click()
    self.driver.find_element(By.CSS_SELECTOR, "button").click()

    # Pareil que pour le test 4
    WebDriverWait(self.driver, 10).until(
      expected_conditions.presence_of_element_located((By.CSS_SELECTOR, "div:nth-child(2) > p:nth-child(4)"))
    )

    assert self.driver.find_element(By.CSS_SELECTOR, "div:nth-child(2) > p:nth-child(4)").text == "Vie : 100"
    assert self.driver.find_element(By.CSS_SELECTOR, "p:nth-child(1)").text == "Un RAT apparaît ! Préparez-vous au combat."
    self.driver.find_element(By.CSS_SELECTOR, "button").click()

    # Ici, c'est l'API qui met du temps à répondre. On fait les deux assertions
    WebDriverWait(self.driver, 10).until(
      expected_conditions.text_to_be_present_in_element((By.CSS_SELECTOR, "div:nth-child(2) > p:nth-child(4)"),
                                                        "Vie : 95")
    )
    WebDriverWait(self.driver, 10).until(
      expected_conditions.text_to_be_present_in_element((By.CSS_SELECTOR, "div:nth-child(3) > p:nth-child(3)"),
                                                        "Vie : 85")
    )

    # Redondance
    assert self.driver.find_element(By.CSS_SELECTOR, "div:nth-child(2) > p:nth-child(4)").text == "Vie : 95"
    assert self.driver.find_element(By.CSS_SELECTOR, "div:nth-child(3) > p:nth-child(3)").text == "Vie : 85"
  
